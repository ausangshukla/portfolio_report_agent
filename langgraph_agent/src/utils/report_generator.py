import json
import os
from datetime import datetime
from jinja2 import Environment, FileSystemLoader
import markdown
from bs4 import BeautifulSoup

def generate_html_report(json_report_path: str, output_html_path: str):
    """
    Generates a well-formatted HTML report from a JSON analysis report,
    including tabular data and charts.

    Args:
        json_report_path (str): The file path to the input JSON report.
        output_html_path (str): The full file path for the output HTML document.
    """
    try:
        with open(json_report_path, 'r', encoding='utf-8') as f:
            report_data = json.load(f)

        # Set up Jinja2 environment
        env = Environment(loader=FileSystemLoader(os.path.dirname(__file__)))

        # Add a filter to convert markdown to HTML
        def markdown_to_html(md_text):
            return markdown.markdown(md_text)
        env.filters['markdown_to_html'] = markdown_to_html

        template = env.from_string("""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Analysis Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; background-color: #f4f4f4; color: #333; }
        .container { max-width: 900px; margin: auto; background: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        h1, h2, h3 { color: #0056b3; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .chart-container { position: relative; height: 400px; width: 100%; margin-bottom: 20px; }
        .references { margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px; }
        .references ul { list-style: none; padding: 0; }
        .references li { margin-bottom: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Portfolio Analysis Report</h1>
        <p>This document provides a detailed analysis of the portfolio, generated by the LangGraph agent.</p>
        {% for section in report_data %}
            <h2>{{ section.section }}</h2>
            <div>{{ section.content | markdown_to_html }}</div>

            {% if section.tabular_data %}
                <h3>{{ section.tabular_data.title }}</h3>
                <table>
                    <thead>
                        <tr>
                            {% for header in section.tabular_data.rows[0].keys() %}
                                <th>{{ header }}</th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for row in section.tabular_data.rows %}
                            <tr>
                                {% for key, value in row.items() %}
                                    <td>{{ value if value is not none else '' }}</td>
                                {% endfor %}
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% endif %}

            {% if section.graph_spec and section.graph_spec.type != 'none' %}
                <h3>{{ section.graph_spec.title }}</h3>
                {% if section.graph_spec.type == 'textual_description' %}
                    <p>{{ section.graph_spec.data }}</p>
                {% else %}
                    <div class="chart-container">
                        <canvas id="chart-{{ loop.index }}"></canvas>
                    </div>
                    <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            var ctx = document.getElementById('chart-{{ loop.index }}').getContext('2d');
                            var chartData = {{ section.graph_spec.data | tojson }};
                            var chartType = "{{ section.graph_spec.type }}";
                            new Chart(ctx, {
                                type: chartType,
                                data: chartData,
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: {
                                        title: {
                                            display: true,
                                            text: "{{ section.graph_spec.title }}"
                                        }
                                    }
                                }
                            });
                        });
                    </script>
                {% endif %}
            {% endif %}

            {% if section.references %}
                <div class="references">
                    <h3>References</h3>
                    <ul>
                        {% for ref in section.references %}
                            <li>{{ ref.document }}: {{ ref.location }}</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}
        {% endfor %}
    </div>
</body>
</html>
        """)

        # Render the template
        html_content = template.render(report_data=report_data)

        os.makedirs(os.path.dirname(output_html_path), exist_ok=True)
        with open(output_html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"HTML report successfully generated at '{output_html_path}'")

    except FileNotFoundError:
        print(f"Error: JSON report file not found at '{json_report_path}'")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{json_report_path}'. Ensure it's a valid JSON file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        import traceback
        traceback.print_exc()

